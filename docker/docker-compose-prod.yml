version: '3.8'

services:
  # Backend API for production
  backend:
    build:
      context: ..
      dockerfile: docker/backend.Dockerfile
      args:
        - ENVIRONMENT=production
    restart: always
    environment:
      - DATABASE_URL=postgresql://postgres:postgres@db:5432/mentis
      - SECRET_KEY=${SECRET_KEY:-supersecretkey}
      - OPENAI_API_KEY=${OPENAI_API_KEY:-}
    command: gunicorn app.main:app --workers 4 --worker-class uvicorn.workers.UvicornWorker --bind 0.0.0.0:8000
    volumes:
      - backend_uploads:/app/uploads
    networks:
      - mentis-network

  # Frontend for production
  frontend:
    build:
      context: ..
      dockerfile: docker/frontend.Dockerfile
      target: production
    restart: always
    depends_on:
      - backend
    networks:
      - mentis-network

  # Production reverse proxy
  nginx:
    image: nginx:stable-alpine
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/prod.conf:/etc/nginx/conf.d/default.conf
      - ./certbot/conf:/etc/letsencrypt
      - ./certbot/www:/var/www/certbot
    depends_on:
      - frontend
      - backend
    restart: always
    networks:
      - mentis-network

  # PostgreSQL Database
  db:
    image: postgres:15
    restart: always
    volumes:
      - postgres_data:/var/lib/postgresql/data
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD:-postgres}
      - POSTGRES_DB=mentis
    networks:
      - mentis-network

  # Certbot for SSL
  certbot:
    image: certbot/certbot
    volumes:
      - ./certbot/conf:/etc/letsencrypt
      - ./certbot/www:/var/www/certbot
    entrypoint: "/bin/sh -c 'trap exit TERM; while :; do certbot renew; sleep 12h & wait $${!}; done;'"

# Persistent volumes
volumes:
  postgres_data:
  backend_uploads:

# Network for services
networks:
  mentis-network: